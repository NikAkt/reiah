//TODO: Possible abstraction here. Could create a general input component
package components

import (
	"strconv"
)

type InputAttributes struct {
	Type        string
	Label       string
	Placeholder string
	Name        string
	Error       string
	Disabled    bool
	Value       string
}

templ FormInput(a InputAttributes) {
	<label class="block mb-4">
		<span class="text-accent text-sm mb-2 dark:text-slate-200">{ a.Label }</span>
		<input
			disabled?={ a.Disabled }
			if len(a.Error) > 0 {
				class="shadow appearance-none border border-red-500 rounded w-full p-3 text-accent leading-tight focus:outline-none focus:shadow-outline dark:bg-slate-800 dark:text-slate-200 disabled:bg-gray-100 dark:disabled:bg-slate-900"
			} else {
				class="shadow appearance-none border rounded w-full p-3 text-accent leading-tight focus:outline-none focus:shadow-outline dark:bg-slate-800 dark:text-slate-200 disabled:bg-gray-100 dark:disabled:bg-slate-900"
			}
			type={ a.Type }
			placeholder={ a.Placeholder }
			name={ a.Name }
			value={ a.Value }
		/>
		if len(a.Error) > 0 {
			<p class="text-red-500 text-xs italic">{ a.Error }</p>
		}
	</label>
}

templ InputGroup(gs int) {
	<div class={ "grid gap-2 grid-cols-" + strconv.Itoa(gs) }>
		{ children... }
	</div>
}

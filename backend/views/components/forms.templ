//TODO: Possible abstraction here. Could create a general input component
package components

import (
"strconv"
)

type InputAttributes struct {
Type string
Label string
Placeholder string
Name string
Disabled bool
}

templ FormInput(a *InputAttributes) {
<label class="block mb-4">
  <span class="text-accent text-sm mb-2 dark:text-slate-200">{ a.Label }</span>
  <input disabled?={ a.Disabled }
    class="shadow appearance-none border rounded w-full p-3 text-accent leading-tight focus:outline-none focus:shadow-outline dark:bg-slate-800 dark:text-slate-200 disabled:bg-gray-100 dark:disabled:bg-slate-900"
    type={ a.Type } placeholder={ a.Placeholder } name={ a.Name } />
</label>
}

templ InputGroup(gs int) {
<div class={ "grid gap-2 grid-cols-" + strconv.Itoa(gs) }>
  { children... }
</div>
}

type ContextKeyType string

templ SettingsForm() {
<form disabled autocomplete="off" hx-put={ "/settings/" + ctx.Value(ContextKeyType("userid")).(string) }>
  @InputGroup(3) {
  @FormInput(&InputAttributes{"text", "Name", "Name", "name", true})
  @FormInput(&InputAttributes{"text", "Surname", "Surname", "surname", true})
  @FormInput(&InputAttributes{"text", "Username", "Username", "username", true})
  }
  @InputGroup(3) {
  @FormInput(&InputAttributes{"email", "Email", "Email", "email", true})
  }
  <div class="mt-6 grid grid-cols-3 gap-2">
    <div class="col-start-3 grid gap-2">
      <button
        class="w-full bg-teal-500 dark:bg-teal-300 hover:bg-green-200 dark:hover:bg-green-950 text-white dark:text-black font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
        Update
      </button>
    </div>
  </div>
</form>
}
